# #!/usr/bin/ruby
snippet #!
	#!/usr/bin/ruby
snippet require
	require "${1}"
snippet case
	case ${1:object}
	when ${2:condition}
		${3}
	end
snippet when
	when ${1:condition}
		${2}
snippet def
	def ${1:method_name}
		${2}
	end
snippet if if
	if ${1:condition}
		${2}
	end
snippet if if else
	if ${1:condition}
		${2}
	else
		${3}
	end
snippet unless
	unless ${1:condition}
		${2}
	end
snippet while
	while ${1:condition}
		${2}
	end
snippet until
	until ${1:condition}
		${2}
	end
snippet class class ... end
	class ${1:`substitute(Filename(), '^.', '\u&', '')`}
		${2}
	end
snippet class class initialize end
	class ${1:`substitute(Filename(), '^.', '\u&', '')`}

		def initialize(${2:args})
			${3}
		end

	end
snippet class class < end
	class ${1:`substitute(Filename(), '^.', '\u&', '')`} < ${2:ParentClass}

		def initialize(${3:args})
			${4}
		end

	end
snippet module
	module ${1:`substitute(Filename(), '^.', '\u&', '')`}
		${2}
	end
snippet r
	attr_reader :${1:attr_names}
snippet w
	attr_writer :${1:attr_names}
snippet rw
	attr_accessor :${1:attr_names}
snippet mm
	def method_missing(meth, *args, &blk)
		${1}
	end
snippet am
	alias_method :${1:new_name}, :${2:old_name}
snippet array
	Array.new(${1:10}) { |${2:i}| ${3} }
snippet hash
	Hash.new { |${1:hash}, ${2:key}| $1[$2] = ${3} }
snippet file File.foreach() { |line| .. }
	File.foreach(${1:"path/to/file"}) { |${2:line}| ${3} }
snippet file File.read()
	File.read(${1:"path/to/file"})${2}
snippet Dir Dir.global() { |file| .. }
	Dir.glob(${1:"dir/glob/*"}) { |${2:file}| ${3} }
snippet Dir Dir[".."]
	Dir[${1:"glob/**/*.rb"}]${2}
snippet inj
	inject(${1:init}) { |${2:mem}, ${3:var}| ${4} }
snippet do
	do |${1:variable}|
		${2}
	end
snippet redirect path 
	redirect_to ${1:path}
snippet redirect message
	redirect_to ${1:path}, :${2:notice} => "${3:message}"
snippet accepts
	accepts_nested_attributes_for :${1:association_name}
snippet log
	logger.info("${1}")
snippet debug
	logger.debug("${1:message}")
snippet warn
	logger.warn("${1:message}")
snippet error
	logger.error("${1:message}")
snippet fatal
	logger.fatal( "${1:message}")
snippet session
	session[:${1:var}]
snippet flash
	flash[:${1:notice}] = "${2:text}"
snippet scope scope name condition
	scope :${1:name}, ${2:condition}
snippet scope scope name lambda
	scope :${1:name}, lambda { |${2:param}| ${3:function} }
snippet find
	@${1:item} = ${2:Model}.find(params[:${3:id}])
snippet utf
	# coding: UTF-8
