require 'logger'

def enable_logger
 log_to(Logger.new(STDOUT))
end

def disable_logger
  log_to(nil)
end

def log_to(logger)
 ActiveRecord::Base.logger = logger
 ActiveRecord::Base.clear_active_connections!
end

def Object.method_added(method)
  return super(method) unless method == :helper
  (class<<self;self;end).send(:remove_method, :method_added)

  def helper(*helper_names)
    returning $helper_proxy ||= Object.new do |helper|
      helper_names.each { |h| helper.extend "#{h}_helper".classify.constantize }
    end
  end

  helper.instance_variable_set("@controller", ActionController::Integration::Session.new)

  def helper.method_missing(method, *args, &block)
    @controller.send(method, *args, &block) if @controller && method.to_s =~ /_path$|_url$/
  end

  helper :application rescue nil

end 

require 'rubygems'
require 'hirb'

Hirb.enable
enable_logger
